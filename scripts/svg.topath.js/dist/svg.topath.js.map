{"version":3,"file":"svg.topath.js","sources":["../src/svg.topath.js"],"sourcesContent":["\r\nimport { Path, Shape, extend } from '@svgdotjs/svg.js'\n\n// Normalise attributes\nconst normaliseAttributes = (attr) => {\n  for (const a in attr) {\n    if (!/fill|stroke|opacity|transform/.test(a)) { delete attr[a] }\n  }\n\n  return attr\n}\n\nextend(Shape, {\r\n  // Convert element to path\r\n  toPath (replace = true) {\r\n    var d\r\n\r\n    switch (this.type) {\r\n    case 'rect': {\r\n      let {\r\n        width: w,\r\n        height: h,\r\n        rx,\r\n        ry,\r\n        x,\r\n        y\r\n      } = this.attr(['width', 'height', 'rx', 'ry', 'x', 'y'])\r\n\r\n      // normalise radius values, just like the original does it (or should do)\r\n      if (rx < 0) rx = 0\r\n      if (ry < 0) ry = 0\r\n      rx = rx || ry\r\n      ry = ry || rx\r\n      if (rx > w / 2) rx = w / 2\r\n      if (ry > h / 2) ry = h / 2\r\n\r\n      if (rx && ry) {\r\n        // if there are round corners\r\n\r\n        d = [\r\n          ['M', rx + x, y],\r\n          ['h', w - 2 * rx],\r\n          ['a', rx, ry, 0, 0, 1, rx, ry],\r\n          ['v', h - 2 * ry],\r\n          ['a', rx, ry, 0, 0, 1, -rx, ry],\r\n          ['h', -w + 2 * rx],\r\n          ['a', rx, ry, 0, 0, 1, -rx, -ry],\r\n          ['v', -h + 2 * ry],\r\n          ['a', rx, ry, 0, 0, 1, rx, -ry],\r\n          ['z']\r\n        ]\r\n      } else {\r\n        // no round corners, no need to draw arcs\r\n        d = [\r\n          ['M', x, y],\r\n          ['h', w],\r\n          ['v', h],\r\n          ['h', -w],\r\n          ['v', -h],\r\n          ['z']\r\n        ]\r\n      }\r\n\r\n      break\r\n    }\r\n    case 'circle':\r\n    case 'ellipse': {\r\n      let rx = this.rx()\r\n      let ry = this.ry()\r\n      let { cx, cy } = this.attr(['cx', 'cy'])\r\n\r\n      d = [\r\n        ['M', cx - rx, cy],\r\n        ['A', rx, ry, 0, 0, 0, cx + rx, cy],\r\n        ['A', rx, ry, 0, 0, 0, cx - rx, cy],\r\n        ['z']\r\n      ]\r\n\r\n      break\r\n    }\r\n    case 'polygon':\r\n    case 'polyline':\r\n    case 'line':\r\n\r\n      d = this.array().map(function (arr) {\r\n        return ['L'].concat(arr)\r\n      })\r\n\r\n      d[0][0] = 'M'\r\n\r\n      if (this.type === 'polygon') { d.push('Z') }\r\n\r\n      break\r\n    case 'path':\r\n      d = this.array()\r\n      break\r\n    default:\r\n      throw new Error('SVG toPath got unsupported type ' + this.type, this)\r\n    }\r\n\r\n    const path = new Path()\r\n      .plot(d)\r\n      .attr(normaliseAttributes(this.attr()))\r\n\r\n    if (replace) {\r\n      this.replace(path)\r\n    }\r\n\r\n    return path\r\n  }\r\n\r\n})\r\n"],"names":["normaliseAttributes","attr","a","test","extend","Shape","toPath","replace","d","type","w","width","h","height","rx","ry","x","y","cx","cy","array","map","arr","concat","push","Error","path","Path","plot"],"mappings":"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"}